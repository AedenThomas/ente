// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:photos/src/rust/frb_generated.dart';

// These functions are ignored because they are not marked as `pub`: `create_index`, `ensure_capacity`, `get_index`, `load_index`, `save_index`

Future<(BigInt, BigInt, BigInt, BigInt, BigInt)> getIndexStats({
  required String indexPath,
}) =>
    RustLib.instance.api.crateApiUsearchApiGetIndexStats(indexPath: indexPath);

Future<void> addVector({
  required String indexPath,
  required BigInt key,
  required List<double> vector,
}) =>
    RustLib.instance.api.crateApiUsearchApiAddVector(
      indexPath: indexPath,
      key: key,
      vector: vector,
    );

Future<void> bulkAddVectors({
  required String indexPath,
  required Uint64List keys,
  required List<Float32List> vectors,
}) =>
    RustLib.instance.api.crateApiUsearchApiBulkAddVectors(
      indexPath: indexPath,
      keys: keys,
      vectors: vectors,
    );

Future<(Uint64List, Float32List)> searchVectors({
  required String indexPath,
  required List<double> query,
  required BigInt count,
}) =>
    RustLib.instance.api.crateApiUsearchApiSearchVectors(
      indexPath: indexPath,
      query: query,
      count: count,
    );

Future<Float32List> getVector({
  required String indexPath,
  required BigInt key,
}) =>
    RustLib.instance.api
        .crateApiUsearchApiGetVector(indexPath: indexPath, key: key);

Future<BigInt> removeVector({required String indexPath, required BigInt key}) =>
    RustLib.instance.api
        .crateApiUsearchApiRemoveVector(indexPath: indexPath, key: key);

Future<void> resetIndex({required String indexPath}) =>
    RustLib.instance.api.crateApiUsearchApiResetIndex(indexPath: indexPath);
